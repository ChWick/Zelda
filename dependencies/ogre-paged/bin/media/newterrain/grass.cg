void main_vp(
			float4 iPosition : POSITION,
			float4 iColor    : COLOR,
			float3 iUV       : TEXCOORD0,
			out float4 oPosition : POSITION,
			out float4 oColor    : COLOR,
			out float3 oUV       : TEXCOORD0,
			uniform float time,
			uniform float frequency,
			uniform float4 direction,
				uniform float4x4 worldViewProj,
				uniform float3 camPos,
			uniform float fadeRange,
			// shadows
			out float4 oLightPosition0	: TEXCOORD1,
			out float4 oLightPosition1	: TEXCOORD2,
			out float4 oLightPosition2	: TEXCOORD3,
			uniform float4x4 texWorldViewProjMatrix0,
			uniform float4x4 texWorldViewProjMatrix1,
			uniform float4x4 texWorldViewProjMatrix2)
{
	float4 position = iPosition;
	float dist = distance(camPos.xz, position.xz);
	oColor.rgb = iColor.rgb;
	oColor.a = 2.0f - (2.0f * dist / fadeRange);
	float oldposx = position.x;
	if (iUV.y == 0.0f)
	{
		float offset = sin(time + oldposx * frequency);
		position += direction * offset;
	}
	oPosition = mul(worldViewProj, position);
	oUV = iUV;
	oUV.z = oPosition.z;

	// Calculate the position of vertex in light space
	oLightPosition0 = mul(texWorldViewProjMatrix0, position);
	oLightPosition1 = mul(texWorldViewProjMatrix1, position);
	oLightPosition2 = mul(texWorldViewProjMatrix2, position);
}


///
float shadowPCF(sampler2D shadowMap, float4 shadowMapPos, float2 offset)
{
	shadowMapPos = shadowMapPos / shadowMapPos.w;
	float2 uv = shadowMapPos.xy;
	float3 o = float3(offset, -offset.x) * 0.3f;

	///  temp* =  -0.99f  -1 no shadow  0 all shadowed
	float bias = -0.0f;
	//return (shadowMapPos.z+bias <= tex2D(shadowMap, uv.xy).r) ? 1 : 0;
	// Note: We using 2x2 PCF. Good enough and is alot faster.
	float c = (shadowMapPos.z+bias <= tex2D(shadowMap, uv.xy - o.xy).r) ? 1 : 0; // top left
		 c += (shadowMapPos.z+bias <= tex2D(shadowMap, uv.xy + o.xy).r) ? 1 : 0; // bottom right
		 c += (shadowMapPos.z+bias <= tex2D(shadowMap, uv.xy + o.zy).r) ? 1 : 0; // bottom left
		 c += (shadowMapPos.z+bias <= tex2D(shadowMap, uv.xy - o.zy).r) ? 1 : 0; // top right
	return c / 4;  /**/
}

///
void main_fp(float3 uv			: TEXCOORD0, 
			 //float3 lightDir	: TEXCOORD1,
			 //float3 eyeDir	: TEXCOORD2,
			 //float3 halfAngle	: TEXCOORD3,
			float4 iColor    : COLOR,

			float4 LightPosition0	: TEXCOORD1,
			float4 LightPosition1	: TEXCOORD2,
			float4 LightPosition2	: TEXCOORD3,

			/** uniform float3 lightAmbient, 
			 uniform float3 lightDiffuse, 
			 uniform float3 lightSpecular, 
			 uniform float matShininess,
			/**/
			 uniform sampler2D diffuseMap,
			//uniform sampler2D normalHeightMap,

			uniform sampler2D shadowMap0,
			uniform sampler2D shadowMap1,
			uniform sampler2D shadowMap2,

			uniform float4 invShadowMapSize0,
			uniform float4 invShadowMapSize1,
			uniform float4 invShadowMapSize2,
			uniform float4 pssmSplitPoints,

			 out float4 oColor : COLOR)
{ 

	float4 diffTex = tex2D(diffuseMap, uv);
	float3 diffClr = diffTex.xyz;

	// calculate shadow
	float shadowing = 1.0f;
	float4 splitColour;
	if (uv.z <= pssmSplitPoints.y)
	{
		splitColour = float4(0, 0.9, 0.9, 1);
		shadowing = shadowPCF(shadowMap0, LightPosition0, invShadowMapSize0.xy);
	}
	else if (uv.z <= pssmSplitPoints.z)
	{
		splitColour = float4(0, 0.9, 0, 1);
		shadowing = shadowPCF(shadowMap1, LightPosition1, invShadowMapSize1.xy); //1
	}else
	{
		splitColour = float4(0.9, 0.9, 0, 1);
		shadowing = shadowPCF(shadowMap2, LightPosition2, invShadowMapSize2.xy); //2
	}/**/
		//shadowing = shadowPCF(shadowMap0, LightPosition0, invShadowMapSize0.xy);


	//oColor = splitColour;
	float3 clr = diffClr * (0.65f + 0.35f * shadowing);
	oColor = float4(clr, diffTex.a) * iColor;
}